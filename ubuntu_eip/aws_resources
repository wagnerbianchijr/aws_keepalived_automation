Before your setup_master.sh can run, the EC2 instances need an IAM role that allows them to 
call the AWS APIs for Elastic IPs and ENIs. Let me give you the clean sequence in Plain AWS 
CLI steps, with explanations. You’ll end up with:

You need AWS CLI for the below:
$ aws --version
aws-cli/2.25.14 Python/3.12.10 Darwin/24.6.0 source/arm64

--

mkdir ./aws_staging
cd ./aws_staging

--

cat > trust-policy.json <<'EOF'
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF

cat > keepalived-eip-policy.json <<'EOF'
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ec2:DescribeAddresses",
                "ec2:AssociateAddress",
                "ec2:DisassociateAddress",
                "ec2:DescribeInstances",
                "ec2:DescribeNetworkInterfaces",
                "ec2:CreateNetworkInterface",
                "ec2:AttachNetworkInterface",
                "ec2:DetachNetworkInterface",
                "ec2:DeleteNetworkInterface",
                "ec2:CreateTags",
                "iam:GetInstanceProfile",
                "iam:ListRolePolicies",
                "iam:GetRolePolicy",
                "iam:ListAttachedRolePolicies"
            ],
            "Resource": "*"
        }
    ]
}
EOF

#: Create the IAM role
aws iam create-role \
  --role-name KeepalivedEipRole \
  --assume-role-policy-document file://trust-policy.json \
  --profile readyset-sandbox-default

#: Attach the permissions policy
aws iam put-role-policy \
  --role-name KeepalivedEipRole \
  --policy-name KeepalivedEipPolicy \
  --policy-document file://keepalived-eip-policy.json \
  --profile readyset-sandbox-default

#: Add the role into it
aws iam add-role-to-instance-profile \
  --instance-profile-name KeepalivedEipInstanceProfile \
  --role-name KeepalivedEipRole \
  --profile readyset-sandbox-default

#: Attach the instance profile to your EC2s

for x in {i-04861460dd4589e08,i-0693a772ba4c8750c};
do
  aws ec2 associate-iam-instance-profile \
    --region us-east-1 \
    --instance-id ${x} \
    --iam-instance-profile Name=KeepalivedEipInstanceProfile \
    --profile readyset-sandbox-default \
    --output text;
done

#: Export INSTANCE_IDs
export INSTANCE_ID_1=i-04861460dd4589e08
export INSTANCE_ID_2=i-0693a772ba4c8750c

#: Adjust Security Groups
SG_ID=$(aws ec2 describe-instances \
  --instance-ids $INSTANCE_ID_1 \
  --query "Reservations[].Instances[].SecurityGroups[0].GroupId" \
  --profile readyset-sandbox-default \
  --output text); echo "SG_ID: $SG_ID"

#: authorizing VRRP communication traffic
aws ec2 authorize-security-group-ingress \
  --group-id ${SG_ID} \
  --protocol 112 --port -1 \
  --source-group ${SG_ID} \
  --profile readyset-sandbox-default \
  --output table

#: collecting VPC ID, Subnet ID and the VPC CIDR
SUBNET_ID=$(aws ec2 describe-instances \
  --instance-ids $INSTANCE_ID_1 \
  --query "Reservations[].Instances[].SubnetId" \
  --output text \
  --profile readyset-sandbox-default)

VPC_ID=$(aws ec2 describe-subnets \
  --subnet-ids $SUBNET_ID \
  --query "Subnets[0].VpcId" \
  --output text \
  --profile readyset-sandbox-default)

VPC_CIDR=$(aws ec2 describe-vpcs \
  --vpc-ids $VPC_ID \
  --query "Vpcs[0].CidrBlock" \
  --output text \
  --profile readyset-sandbox-default)

#: authorizing the ProxySQL
aws ec2 authorize-security-group-ingress \
  --group-id ${SG_ID} \
  --protocol tcp --port 6032 \
  --cidr ${VPC_CIDR} \
  --profile readyset-sandbox-default \
  --output table

aws ec2 authorize-security-group-ingress \
  --group-id ${SG_ID} \
  --protocol tcp --port 6033 \
  --cidr ${VPC_CIDR} \
  --profile readyset-sandbox-default \
  --output table

Recap:

trust-policy.json → lets EC2 assume the role.

- KeepalivedEipRole → the role itself.
- keepalived-eip-policy.json → allows EIP + ENI actions.
- KeepalivedEipInstanceProfile → wrapper to bind the role to EC2s.
- associate-iam-instance-profile → actually attaches it to your servers.

Once this is done, your setup_master.sh can safely call aws ec2 associate-address, 
disassociate-address, and create-network-interface without needing credentials inside 
the instance.